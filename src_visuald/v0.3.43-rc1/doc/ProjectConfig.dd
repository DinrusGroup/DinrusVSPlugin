Ddoc

$(P The project configuration is similar to what you know from other languages:)

$(IMG_CENTER images/project_config.png)

$(P Available macro replacements enclosed in $(DOLLAR)():)
$(UL
  $(LI DMDINSTALLDIR: DMD Install path)
  $(LI WINDOWSSDKDIR: Windows SDK Directory)
  $(LI DEVENVDIR: Directory of Visual Studio executable devenv.exe)
  $(LI VSINSTALLDIR: Root directory of Visual Studio installation)
  $(LI VISUALDINSTALLDIR: Installation folder of Visual D)
  $(LI PLATFORMNAME: always Win32)
  $(LI CONFIGURATIONNAME)
  $(LI OUTDIR: Ouptut path)
  $(LI INTDIR: Intermediate path)
  $(LI INPUTPATH/DIR/FILENAME/EXT/NAME: input file/project file components)
  $(LI PROJECTPATH/DIR/FILENAME/EXT/NAME: project file components)
  $(LI SOLUTIONPATH/DIR/FILENAME/EXT/NAME: solution file components)
  $(LI TARGETPATH/DIR/FILENAME/EXT/NAME: target file components)
  $(LI any variable from the system environment)
)

$(H2 Documentation generation using CanDyDOC)

If you want to use $(LINK2 http://www.dsource.org/projects/helix/wiki/CandyDoc, CanDyDOC) for documentation generation, 
you need to create a ddoc file that contains the list of modules. Visual D can automatically create this file. 
Here is how you can setup a project:
$(UL
  $(LI Create the documentation directory and copy the candydoc directory from the distribution into the documentation directory.)
  $(LI Add the file candy.ddoc from the candydoc directory to the project.)
  $(LI On the documentation configuration page, enable documentation, set the documentation directory)
  $(LI Specify a CanDyDOC module file that is generated by Visual D)
)

$(IMG_CENTER images/doc_config.png)

Macros:
	TITLE=Project Configuration