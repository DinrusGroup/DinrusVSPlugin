Ddoc

$(P DMD comes with an option to instrument an executable for profiling its execution. 
You can enable it on the project configuration page "Code Generation".)

$(IMG_CENTER images/prop_codegen.png)

$(P Running the executable will create a file named trace.log in the current working 
directory. Opening the profiler window from the Visual D menu allows browsing the info 
in this file conveniently. You must specify the full path to the trace.log in the edit 
field at the top of the window.)

$(IMG_CENTER images/profiler.png)

$(P The toolbar at the top is used to)
$(UL
  $(LI enable/disable alternate color display for the rows)
  $(LI enable/disable automatic closing of the profiler window if you jump to a function by double-clicking 
    its list entry)
  $(LI enable/disable display of full type information of the functions)
  $(LI enable/disable display of function fan in/out, i.e. which functions are called by the selected 
    function and which functions are calling it)
  $(LI guess the location of the trace.log file from the current startup project and its debugging settings)
  $(LI remove the trace.log file from disk to start a new profiling session (without removing the file multiple
    runs of the executable accumulate statistics in the log file))
  $(LI refresh display from the trace.log file)
)

$(P The times in the function list are displayed in microseconds.)
$(UL 
  $(LI Tree time: time spent executing the function including functions called)
  $(LI Func time: time spent executing the function excluding functions called)
  $(LI Call time: Func time/Calls)
)

$(P Double-clicking a line in the function list tries to jump to the corresponding 
source code line. This relies on appropriate information found in generated JSON files.)

$(P Double clicking a line in the caller/callee lists selects the function in the function 
list, so you can navigate through the call tree.)

Macros:
	TITLE=Profiling

